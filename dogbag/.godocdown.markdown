{{ .Emit }}

--

### Zipbag Usage

    # To dogbag a directory:
    $ dogbag ./assets

    // assets.go:
    dogbag, err := assets()
    // dogbag is a Bag, with the following interface:

```go
SetBase(path string) error
```
SetBase will set the base directory that the bag is to serve assets from.

The bag will ignore what it has in memory and serve from disk instead.

The format of the path argument is platform-specific (filepath).

```go
Deploy(path string) error
```
Deploy will deploy the bag to disk, triggering SetBase in the process.

The directory that the bag deploys to is guarded by the SHA1 digest of bag.
That is, a different version of the same program deploying to the
same path will not collide with a previous version.

The format of the path argument is platform-specific (filepath).

```go
 Path(path ...string) string
```
Path will transform a bag path into a file path.

        path := bag.Path("tmpl", "main.tmpl")
        // path => ""

        bag.Deploy("/home/example")
        path := bag.Path("tmpl", "main.tmpl")
        // path => /home/example/bag.f7d9.../tmpl/main.tmpl

        path = bag.Path("data/image.png")
        // path => /home/example/bag.f7d9.../data/image.png

        path = bag.Path()
        // path => /home/example/bag.f7d9.../

The path arguments for this method are always UNIX-style (forward-slash).
The return value is a platform specific path (via filepath).

This method is ONLY useful after either SetBase or Deploy has run.
Otherwise, since the bag does not exist on disk, this method will always return ""
(You can use this behavior to test if a bag has been deployed, if necessary)

```go
 Open(path ...string) (io.ReadCloser, error)
```
Open will open the asset at the given bag path for reading,
whether the asset is in memory or on disk.

        file, err := bag.Open("tmpl/main.tmpl")
        if err != nil {
            return err
        }
        defer file.Close()

